// khana157, 400130106


package si4lab1;

/**
 *
 * @author kamre
 */
public class SI4Lab1 {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        
        HugeInteger test = new HugeInteger ("01");
//        
        HugeInteger test2 = new HugeInteger ("01");
        
        //System.out.println(test2.toString());
//       
        System.out.println(test.multiply(test2));
//        
        test.divide(test2);

    }
    
}



//////////////////////////////////////////////////////
//////////////////////////////////////////////////////

package si4lab1;
import java.util.Random;
import java.util.Arrays;

/**
 *
 * @author kamre
 */
public class HugeInteger {
    
    public int[] arr1;
    

    public HugeInteger(String val) throws IllegalArgumentException { 
        
        if (val.charAt(0) == 45) { // at index 0 checking if negative
            arr1 = new int[val.length()-1]; // creating new array to store number 
            arr1[0] = -1*Character.getNumericValue(val.charAt(1)); // first index is 1
            //int index = 1; 
            
            for (int i = 2; i < val.length(); i++) { //looping through and adding 
                //index ++;
                if (Character.isDigit(val.charAt(i))) { 
                    arr1[i-1] = Character.getNumericValue(val.charAt(i));
                }
                else { 
                    throw new IllegalArgumentException("Entered string must be all integer values");
                }
            }
        }
        else { 
            arr1 = new int[val.length()]; 
            
            for (int i = 0; i < val.length(); i++){ 
                if (Character.isDigit(val.charAt(i))) { 
                    arr1[i] = Character.getNumericValue(val.charAt(i));
                }
                else { 
                    throw new IllegalArgumentException("Entered string must be all integer values");
                }
            }
        }
        
    }
    
    public HugeInteger(int n) throws IllegalArgumentException { 
        
        Random randomNum = new Random();
        
        if (n < 0){ 
            throw new IllegalArgumentException("Size of integer must be >= 1");
        }
        
        boolean numSign = randomNum.nextBoolean();
        
        int determinant = 1; 
        
        if (numSign == false) { 
            determinant = -1; 
        }
        
        arr1 = new int[n];
        int num1 = randomNum.nextInt(8)+1;
        arr1 [0] = determinant * num1;
        
        for (int i=1; i<n; i++){ 
            arr1[i] = randomNum.nextInt(9);
        }         
    }
    
    
    public HugeInteger add(HugeInteger h) { 
        
        int carry = 0;
        
        int lenh = h.arr1.length;
        
        int lenHugeInt = this.arr1.length; 
        
        int sum[] = new int[lenh];
        
        //for (int num : this.arr1) System.out.print(num); 
        
        if (this.arr1[0] >= 0 && h.arr1[0] >= 0){ 
            
            for (int i=lenh-1; i >= 0; i--){ 
                sum[i] = h.arr1[i] + this.arr1[i] + carry;
                //System.out.println(sum[i]);
                if (sum[i] > 9){
                    carry = 1;
                    sum[i] -= 10; 
                }
                else { 
                    carry = 0; 
                }
            }
            
        }
        
        else if (this.arr1[0] >= 0 && h.arr1[0] < 0) { 
        
            for (int i=lenh-1; i >= 0; i--){ 
                sum[i] = h.arr1[i] - this.arr1[i];
                //System.out.println(sum[i]);

            }
        }
        
        
//        if (lenh != lenHugeInt){ 
//            
//            // if they are not of equal length the shorter number will have 0's added to the front
//            
//        }
//        else { 
//            for (int i=lenh-1; i >= 0; i--){ 
//                sum[i] = h.arr1[i] + this.arr1[i] + carry;
//                //System.out.println(sum[i]);
//                if (sum[i] > 9){
//                    carry = 1;
//                    sum[i] -= 10; 
//                }
//                else { 
//                    carry = 0; 
//                }
//            }
//        }
        
        System.out.println (Arrays.toString(sum));

        return null; 

    }
    
   
    public HugeInteger subtract(HugeInteger h){ 
        
        int carry = 0;
        
        int lenh = h.arr1.length;
        
        int lenHugeInt = this.arr1.length; 
        
        int difference[] = new int[lenh];
        
        if (lenh != lenHugeInt){ 
            
            // if they are not of equal length the shorter number will have 0's added to the front
            
        }
        else { 
            
            for (int i=lenh-1; i >= 0; i--){ 
                if (this.arr1[i] < h.arr1[i]){ 
                    
                    this.arr1[i] += 10; 
                    
                    difference[i] = this.arr1[i] - h.arr1[i] - carry; 
                    
                    carry = 1;
                    
                }
                else { 
                    
                    difference[i] = this.arr1[i] - h.arr1[i] - carry;
                    
                }
            }
        }
       
        
        System.out.println (Arrays.toString(difference));
        
        return null;
    }
    
    /////////////////////////////////////////////////
    /////////////////// LAB 2 ///////////////////////
    /////////////////////////////////////////////////
    
    public String toString(){ 
        String stringArr1 = ""; 
        for (int i=0; i<arr1.length; i++){
            stringArr1 += String.valueOf(arr1[i]);
        }
        return (stringArr1); 
    }
    
    public long StringtoLong (String h){ 
        
        long newInt = 0; 
        long factor =1; 
        
        if (h.charAt(0) == '-'){
            for (int i = h.length()-1; i >= 1; i--){ 
                newInt += (h.charAt(i) - '0') * factor;
                factor *= 10;
            }
            
            newInt *= -1;
            return newInt;
        }
        else{
            for (int i=h.length()-1; i>=0; i--){ 
                newInt += (h.charAt(i)-'0') * factor;
                factor *= 10;
            }
            return newInt;
        }
    }
 
    public HugeInteger multiply(HugeInteger h) { 
        String num = this.toString(); // converting huge integer to string 
        String givenNum = h.toString(); // converting given value h to string 
        
        long numLong = StringtoLong(num); // converting to long 
        long givenNumLong = StringtoLong(givenNum); 
        
        //System.out.println(givenNumLong);
        
        long product = numLong * givenNumLong;
        
        String productString = String.valueOf(product);
        
        HugeInteger productHugeInt = new HugeInteger(productString);
        
        return productHugeInt; 
    }
    
    
    public HugeInteger divide(HugeInteger h){ 
        String num = this.toString(); // converting huge integer to string 
        String givenNum = h.toString(); // converting given value h to string 
        
        long numLong = StringtoLong(num); // converting to long 
        long givenNumLong = StringtoLong(givenNum); 
        
        if (givenNumLong == 0){ 
            System.out.println("Undefined");
        }
        
        long quotient = numLong/givenNumLong; 
        
        String quotientString = String.valueOf(quotient);
        
        HugeInteger quotientHugeInt = new HugeInteger(quotientString);
        
        return quotientHugeInt; 
    }
    
    public int compareTo(HugeInteger h){
        
        String num = this.toString();
        String givenNum = h.toString();
        
        long numLong = StringtoLong(num); // converting to long 
        long givenNumLong = StringtoLong(givenNum); 
        
        if (numLong < givenNumLong){ 
            return -1; 
        }
        else{ 
            return 0; 
        }
    }
}
